# docs.serverless.com
service: pl-identity-manage
disabledDeprecations:
  # To disable specific deprecation with code "CODE_1"
  - CODE_1
  # To disable all deprecation messages
  - '*'
frameworkVersion: '3'
provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  memorySize: 128
  environment:
    USER_POOL_ID: { Ref: UserPool }
    CLIENT_ID: { Ref: UserClient }
  iamRoleStatements:
    - Effect: Allow
      Action:
        - cognito-idp:AdminInitiateAuth
        - cognito-idp:AdminCreateUser
        - cognito-idp:AdminSetUserPassword
      Resource: '*'
plugins:
  #Add the plugins to your serverless.yml file and make sure that serverless-plugin-typescript precedes serverless-offline as the order is important:
  - serverless-plugin-typescript
  - serverless-offline
package:
  excludeDevDependencies: true
functions:
  signUpUser:
    handler: src/drivers/lambda/SignupUser.handler
    events:
      - http:
          path: identity-manage/users/signup
          method: post
          cors: true
  signInUser:
    handler: src/drivers/lambda/SignInUser.handler
    events:
      - http:
          path: identity-manage/users/signin
          method: post
          cors: true
  logoutUser:
    handler: src/drivers/lambda/LogoutUser.handler
    events:
      - http:
          path: identity-manage/users/logout
          method: post
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email
  changePasswordUser:
    handler: src/drivers/lambda/ChangePassword.handler
    events:
      - http:
          path: identity-manage/users/change-password
          method: put
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email
  forgotPassword:
    handler: src/drivers/lambda/ForgotPassword.handler
    events:
      - http:
          path: identity-manage/users/forgot-password
          method: post
          cors: true
  confirmPasswrod:
    handler: src/drivers/lambda/ConfirmPassword.handler
    events:
      - http:
          path: identity-manage/users/confirm-password
          method: post
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email
resources:
  Resources:
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: serverless-auth-pool
        Schema:
          - Name: email
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 6
        AutoVerifiedAttributes: ['email']
    UserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: user-pool-ui
        GenerateSecret: false
        UserPoolId: { Ref: UserPool }
        AccessTokenValidity: 5
        IdTokenValidity: 5
        ExplicitAuthFlows:
          - 'ADMIN_NO_SRP_AUTH'
